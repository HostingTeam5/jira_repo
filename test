#pragma once

#include <sstream>
#include "DEFINITIONS.hpp"
#include "GameState.hpp"
#include "GameOverState.hpp"

#include <iostream>

namespace Jerry
{
	GameState::GameState(GameDataRef data) : _data(data)
	{

	}

	void GameState::Init()
	{
		if (!_hitSoundBuffer.loadFromFile(HIT_SOUND_FILEPATH))
		{
			std::cout << "Error Loading Hit Sound Effect" << std::endl;
		}

		if (!_wingSoundBuffer.loadFromFile(WING_SOUND_FILEPATH))
		{
			std::cout << "Error Loading Wing Sound Effect" << std::endl;
		}

		if (!_pointSoundBuffer.loadFromFile(POINT_SOUND_FILEPATH))
		{
			std::cout << "Error Loading Point Sound Effect" << std::endl;
		}
		if (!_explosionSoundBuffer.loadFromFile(EXPLOSION_SOUND_FILEPATH))
		{
			std::cout << "Error Loading explosion Sound Effect" << std::endl;
		}
		if (!_MusicBuffer.loadFromFile(MUSIC_FILEPATH))
		{
			std::cout << "Error Loading Music Sound Effect" << std::endl;
		}

		_hitSound.setBuffer(_hitSoundBuffer);
		_wingSound.setBuffer(_wingSoundBuffer);
		_pointSound.setBuffer(_pointSoundBuffer);
		_explosionSound.setBuffer(_explosionSoundBuffer);
		_Music.setBuffer(_MusicBuffer);
		_Music.play();

		this->_data->assets.LoadTexture("Game Background", GAME_BACKGROUND_FILEPATH);
		this->_data->assets.LoadTexture("Thorn Up", THORN_UP_FILEPATH);
		this->_data->assets.LoadTexture("Thorn Down", THORN_DOWN_FILEPATH);
		this->_data->assets.LoadTexture("Enemy Up", ENEMY_UP_FILEPATH);
		this->_data->assets.LoadTexture("Enemy Down", ENEMY_DOWN_FILEPATH);
		this->_data->assets.LoadTexture("Land", LAND_FILEPATH);
		this->_data->assets.LoadTexture("Sonic Frame 1", SONIC_FRAME_1_FILEPATH);
		this->_data->assets.LoadTexture("Sonic Frame 2", SONIC_FRAME_2_FILEPATH);
		this->_data->assets.LoadTexture("Sonic Frame 3", SONIC_FRAME_3_FILEPATH);
		this->_data->assets.LoadTexture("Sonic Frame 4", SONIC_FRAME_4_FILEPATH);
		this->_data->assets.LoadTexture("Jump Frame 1", JUMP_FRAME_1_FILEPATH);
		this->_data->assets.LoadTexture("Jump Frame 2", JUMP_FRAME_2_FILEPATH);
		this->_data->assets.LoadTexture("Jump Frame 3", JUMP_FRAME_3_FILEPATH);
		this->_data->assets.LoadTexture("Explosion Frame 1", EXPLOSION_FRAME_FILEPATH);
		this->_data->assets.LoadTexture("Explosion Frame 2", EXPLOSION_FRAME_FILEPATH);
		this->_data->assets.LoadTexture("Explosion Frame 3", EXPLOSION_FRAME_FILEPATH);
		this->_data->assets.LoadTexture("Explosion Frame 4", EXPLOSION_FRAME_FILEPATH);
		this->_data->assets.LoadTexture("Explosion Frame 5", EXPLOSION_FRAME_FILEPATH);
		this->_data->assets.LoadTexture("Explosion Frame 6", EXPLOSION_FRAME_FILEPATH);
		this->_data->assets.LoadTexture("Explosion Frame 7", EXPLOSION_FRAME_FILEPATH);
		this->_data->assets.LoadTexture("Explosion Frame 8", EXPLOSION_FRAME_FILEPATH);
		this->_data->assets.LoadTexture("Explosion Frame 9", EXPLOSION_FRAME_FILEPATH);
		//this->_data->assets.LoadTexture("Explosion Frame 10", EXPLOSION_FRAME_FILEPATH);
		
		this->_data->assets.LoadTexture("Scoring Thorn", SCORING_THORN_FILEPATH);
		this->_data->assets.LoadTexture("Scoring Enemy", SCORING_ENEMY_FILEPATH);
		this->_data->assets.LoadFont("Flappy Font", FLAPPY_FONT_FILEPATH);

		thorn = new Thorn(_data);
		land = new Land(_data);
		sonic = new Sonic(_data);
		enemy = new Enemy(_data);
		flash = new Flash(_data);
		hud = new HUD(_data);

		_background.setTexture(this->_data->assets.GetTexture("Game Background"));

		_score = 0;
		hud->UpdateScore(_score);

		_gameState = GameStates::eReady;
	}

	void GameState::HandleInput()
	{
		sf::Event event;

		while (this->_data->window.pollEvent(event))
		{
			//_Music.play();
			//std::cout<<"HI"<<std::endl;
			if (sf::Event::Closed == event.type)
			{
				this->_data->window.close();
			}

			if (this->_data->input.IsSpriteClicked(this->_background, sf::Keyboard::Return, this->_data->window))//sf::Mouse::Left, this->_data->window))
			{
				if (GameStates::eGameOver != _gameState && sonic->getState()==1)
				{
					_gameState = GameStates::ePlaying;
					sonic->Tap();

					_wingSound.play();
				}
			}
		}
	}

	//only gets called in "this->_data->machine.GetActiveState()->Update(dt);" in Game.cpp
	void GameState::Update(float dt)
	{
		if (GameStates::eGameOver != _gameState)
		{
			//std::cout<<"state: "<<sonic->getState()<<std::endl;
			if (sonic->getState()==2 || sonic->getState()==3 || sonic->getState()==4)
			{
				sonic->JumpAnimate(dt);
				land->MoveLand(dt);

			}
			else
			{
				sonic->Animate(dt);
				land->MoveLand(dt);
			}
		}

		//see IsSpriteClicked above
		//called ONLY when Sonic jumps
		if (GameStates::ePlaying == _gameState)
		{
			//std::cout<<"ePlay"<<std::endl;
			thorn->MoveThorns(dt);

			if (clockP.getElapsedTime().asSeconds() > THORN_SPAWN_FREQUENCY)
			{
				//std::cout<<"thorn"<<std::endl;
				//thorn->RandomiseThornOffset();

				//InvisibleThorn solves a lag bug
				thorn->SpawnInvisibleThorn();
				thorn->SpawnBottomThorn();
				thorn->SpawnTopThorn();
				thorn->SpawnScoringThorn();

				clockP.restart();
			}

			enemy->MoveEnemies(dt);

			if (clockLE.getElapsedTime().asSeconds() > ENEMY_LOBSTER_SPAWN_FREQUENCY)
			{
				//enemy->RandomiseEnemyOffset();
				//do not want to randomize y-position of enemies
				enemy->SpawnInvisibleEnemy();
				enemy->SpawnBottomEnemy();
				enemy->SpawnScoringEnemy();

				clockLE.restart();
			}
			if (clockBE.getElapsedTime().asSeconds() > ENEMY_BEE_SPAWN_FREQUENCY)
			{
				//enemy->RandomiseEnemyOffset();
				//do not want to randomize y-position of enemies
				enemy->SpawnInvisibleEnemy();
				enemy->SpawnTopEnemy();
				enemy->SpawnScoringEnemy();

				clockBE.restart();
			}

			sonic->Update(dt);

			std::vector<sf::Sprite> landSprites = land->GetSprites();

			for (int i = 0; i < landSprites.size(); i++)
			{
				if (collision.CheckSpriteCollision(sonic->GetSprite(), 0.7f, landSprites.at(i), 1.0f))
				{
					/*_gameState = GameStates::eGameOver;

					clock.restart();

					_hitSound.play();*/
					sonic->AdjustState(1);
				}
			}

			std::vector<sf::Sprite> thornSprites = thorn->GetSprites();

			for (int i = 0; i < thornSprites.size(); i++)
			{
				if (collision.CheckSpriteCollision(sonic->GetSprite(), 0.625f, thornSprites.at(i), 1.0f))
				{
					_gameState = GameStates::eGameOver;

					clockP.restart();

					_hitSound.play();
					_Music.stop();
				}
			}

			std::vector<sf::Sprite> enemySprites = enemy->GetSprites();

			for (int i = 0; i < enemySprites.size(); i++)
			{
				if (collision.CheckSpriteCollision(sonic->GetSprite(), 0.625f, enemySprites.at(i), 1.0f))
				{
					if (sonic->getState()==1)
					{
						_gameState = GameStates::eGameOver;

						clockLE.restart();

						_hitSound.play();
						_Music.stop();
					}
					//sonic smashes enemy
					else
					{
						//std::cout<<"SMASH"<<std::endl;
						_explosionSound.play();
						if (sonic->getState()==2) //only Bounce if Sonic if falling
						{
							sonic->Bounce(dt);
						}
						//sonic->_sonicSprite.move(0, -FLOATING_SPEED*dt + GRAVITY * dt*dt);
						enemySprites.erase(enemySprites.begin()+i);
						enemy->Explosion(i);

					}
				}
			}


			if (GameStates::ePlaying == _gameState)
			{
				std::vector<sf::Sprite> &scoringSprites = thorn->GetScoringSprites();

				for (int i = 0; i < scoringSprites.size(); i++)
				{
					if (collision.CheckSpriteCollision(sonic->GetSprite(), 0.625f, scoringSprites.at(i), 1.0f))
					{
						_score++;

						hud->UpdateScore(_score);

						scoringSprites.erase(scoringSprites.begin() + i);

						_pointSound.play();
					}
				}
			}
		}

		if (GameStates::eGameOver == _gameState)
		{
			flash->Show(dt);

			if (clockP.getElapsedTime().asSeconds() > TIME_BEFORE_GAME_OVER_APPEARS)
			{
				this->_data->machine.AddState(StateRef(new GameOverState(_data, _score)), true);
			}
		}
	}

	void GameState::Draw(float dt)
	{
		this->_data->window.clear( sf::Color::Red );

		this->_data->window.draw(this->_background);

		//std::cout<<"thorn1"<<std::endl;
		thorn->DrawThorns();
		//std::cout<<"thorn2"<<std::endl;
		enemy->DrawEnemies();
		land->DrawLand();
		sonic->Draw();

		flash->Draw();

		hud->Draw();

		this->_data->window.display();
	}
}
